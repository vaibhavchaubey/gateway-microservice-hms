spring.application.name=gateway-microservice-hms
server.port=9000

# ✅ Global Filters
# Deduplicates the 'Access-Control-Allow-Origin' header to avoid CORS issues due to repeated headers in the response
spring.cloud.gateway.server.webflux.default-filters[0]=DedupeResponseHeader=Access-Control-Allow-Origin RETAIN_UNIQUE


# ✅ Global CORS Configuration

# Allow specific origins (comma-separated)
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedOrigins=http://localhost:5173

# Allow specific HTTP methods (comma-separated)
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedMethods=GET,POST,PUT,DELETE

# Allow specific headers (comma-separated)
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedHeaders=*


# ✅ User Microservice Route
spring.cloud.gateway.server.webflux.routes[0].id=UserMS
spring.cloud.gateway.server.webflux.routes[0].uri=lb://user-microservice-hms
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/user/**
# custom filter for Microservice. It runs before forwarding the request to the backend.
spring.cloud.gateway.server.webflux.routes[0].filters[0]=TokenFilter

# ✅ Profile Microservice Route
spring.cloud.gateway.server.webflux.routes[1].id=ProfileMS
spring.cloud.gateway.server.webflux.routes[1].uri=lb://profile-microservice-hms
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/profile/**
# custom filter for Microservice. It runs before forwarding the request to the backend.
spring.cloud.gateway.server.webflux.routes[1].filters[0]=TokenFilter

# ✅ Appointment Microservice Route
spring.cloud.gateway.server.webflux.routes[2].id=AppointmentMS
spring.cloud.gateway.server.webflux.routes[2].uri=lb://appointment-microservice-hms
spring.cloud.gateway.server.webflux.routes[2].predicates[0]=Path=/appointment/**
# custom filter for Microservice. It runs before forwarding the request to the backend.
spring.cloud.gateway.server.webflux.routes[2].filters[0]=TokenFilter

# ✅ Pharmacy Microservice Route
spring.cloud.gateway.server.webflux.routes[3].id=PharmacyMS
spring.cloud.gateway.server.webflux.routes[3].uri=lb://pharmacy-microservice-hms
spring.cloud.gateway.server.webflux.routes[3].predicates[0]=Path=/pharmacy/**
# custom filter for Microservice. It runs before forwarding the request to the backend.
spring.cloud.gateway.server.webflux.routes[3].filters[0]=TokenFilter
